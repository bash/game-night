{% extends 'base' %}

{% block title %}Profile{% endblock title %}

{% block content %}
<form method="post">
    <p>
        Hi, my name is
        {% if can_update_name %}
        <input type="text" class="-inline" placeholder="Name" name="name" value="{{user.name}}" required autocomplete="name" size="15">
        {% else %}
        <input type="text" class="-inline" value="{{user.name}}" size="15" disabled>
        {% endif %}
        and <br>
        my email address is
        <input type="email" class="-inline" value="{{user.email_address}}" disabled>.
    </p>

    <h2>Notifications</h2>

    <p>
        Please
        <select class="-inline" name="subscribe" id="subscription">
            <option value="on">send</option>
            <option value="off">do not send</option>
        </select>
        me notifications about <em>Tau's Game Night</em><span data-visible-if="subscription=on"><template>.</template></span>

        <span data-visible-if="subscription=off">
            <template>
                until
                <select class="-inline" id="permanence">
                    <option value="temporary">after the following day</option>
                    <option value="permanent">I turn them on again</option>
                </select>

                <span data-visible-if="permanence=temporary">
                    <template>
                        : <input type="date" name="until" class="-inline" required>
                    </template>
                </span>
                .
            </template>
        </span>
    </p>

    <p>
        You can also receive push notifications in addition to emails.

        <push-subscription-button endpoints="{{push_endpoints | json_encode}}"></push-subscription-button>

        <button type="button" data-web-push-subscribe-button>Subscribe on this device</button>
        <button type="button" data-web-push-unsubscribe-button>Unsubscribe</button>
    </p>

    {% if symbols %}
    <h2>Avatar</h2>
    <fieldset>
        The following symbol is my avatar:

        <div class="symbol-picker">
            {% for symbol in symbols %}
                <label class="symbol">
                    <span class="label">{{symbol}}</span>
                    <input type="radio" name="symbol" value="{{symbol}}" {% if symbol == user.symbol %}checked{% endif %} autocomplete="off">
                </label>
            {% endfor %}
        </div>
    </fieldset>
    {% endif %}

    <fieldset class="-actions">
        <button type="submit">Save my details</button>
        {% if list_users_uri %}
            <a href="{{list_users_uri}}" class="link-button">Show me the list of users, please</a>
        {% endif %}
    </fieldset>

    <p>
        <strong>P.S.</strong> You can always <a href="{{delete_profile_uri}}">delete your profile</a>
        if you no longer wish to participate in <em>Tau's Game Night</em>.
    </p>
</form>
{% endblock %}

{% block scripts %}
<script type="module">
  const State = {
    WAITING_FOR_SERVICE_WORKER: 1,
    NOT_SUBSCRIBED: 2,
    SUBSCRIBING: 3,
    SUBSCRIBED: 4,
    UNSUBSCRIBING: 5,
  }
  class PushSubscriptionButton extends HTMLElement {
    #state = State.WAITING_FOR_SERVICE_WORKER
    #endpoints
    #button
    #pushManager

    connectedCallback() {
      this.#endpoints = JSON.parse(this.getAttribute('endpoints'))
      this.#button = document.createElement('button')
      this.#button.addEventListener('click', (event) => this.#onClick(event))
      this.append(this.#button)
      this.#update()
      this.#getPushManager()
    }

    #setState(state) {
      this.#state = state
      this.#update()
    }

    #update() {
      this.#updateEnabled()
      this.#updateLabel()
    }

    #updateEnabled() {
      this.#button.disabled = !(
        this.#state === State.SUBSCRIBED ||
        this.#state === State.NOT_SUBSCRIBED)
    }

    #updateLabel() {
      switch (this.#state) {
        case State.WAITING_FOR_SERVICE_WORKER:
        case State.NOT_SUBSCRIBED:
          this.#button.innerText = 'Subscribe on this device'
          break
        case State.SUBSCRIBING:
          this.#button.innerText = 'Subscribing...'
          break
        case State.SUBSCRIBED:
          this.#button.innerText = 'Unsubscribe'
          break
        case State.UNSUBSCRIBING:
          this.#button.innerText = 'Unsubscribing...'
          break
      }
    }

    async #getPushManager() {
      const { pushManager } = await navigator.serviceWorker.ready
      const subscription = await pushManager.getSubscription()
      const state = subscription ? State.SUBSCRIBED : State.NOT_SUBSCRIBED
      this.#pushManager = pushManager
      this.#setState(state)
    }

    #onClick(event) {
      event.preventDefault()
      switch (this.#state) {
        case State.NOT_SUBSCRIBED:
          return this.#subscribe();
        case State.SUBSCRIBED:
          return this.#unsubscribe();
      }
    }

    async #subscribe() {
       const webPushKey = await fetch(this.#endpoints.get_public_key).then(r => r.text())
       console.log(webPushKey)
    }

    async #unsubscribe() {
    }
  }
  customElements.define("push-subscription-button", PushSubscriptionButton)
</script>

<script type="module">
    const endpoints = {{push_endpoints | json_encode | safe}}
    const subscribeButton = document.querySelector('[data-web-push-subscribe-button]')
    subscribeButton.addEventListener('click', logErrors(async () => {
        subscribeButton.disabled = true
        const webPushKey = await fetch(endpoints.get_public_key).then(r => r.text())
        const registration = await navigator.serviceWorker.ready
        const subscription = await registration.pushManager.subscribe({ userVisibleOnly: true, applicationServerKey: webPushKey })
        const { endpoint, keys } = subscription.toJSON()
        await fetch(endpoints.subscribe, {
          method: 'post',
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ endpoint, keys })
        })
    }))

    const unsubscribeButton = document.querySelector('[data-web-push-unsubscribe-button]')
    unsubscribeButton.addEventListener('click', logErrors(async () => {
        unsubscribeButton.disabled = true
        const registration = await navigator.serviceWorker.ready
        const subscription = await registration.pushManager.getSubscription()
        const endpoint = subscription.endpoint
        await subscription.unsubscribe()
        await fetch(endpoints.unsubscribe, {
          method: 'post',
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ endpoint })
        })
    }))

    function logErrors(f) {
      return async (...args) => {
        try {
          await f(...args)
        } catch (e) {
          console.error(e)
          throw e
        }
      }
    }
</script>
<script id="form-values" type="application/json">
    {% if user.email_subscription.type == 'permanently_unsubscribed' %}{% set permanence = 'permanent' %}
    {% else %}{% set permanence = 'temporary' %}{% endif %}

    {% if user.email_subscription.type == 'subscribed' %}{% set subscription = 'on' %}
    {% else %}{% set subscription = 'off' %}{% endif %}

    { "subscription": {{ subscription | json_encode | safe }}
    , "permanence": {{ permanence | json_encode | safe }}
    , "until": {{ user.email_subscription.until | default(value='') | json_encode | safe }}
    }</script>
<script>
    let formValues = JSON.parse(document.getElementById('form-values').innerText)

    function bindRequiredAndVisibleTo(scope) {
        for (const target of scope.querySelectorAll('[data-visible-if]')) {
            const [sourceId, sourceValue] = target.dataset.visibleIf.split('=')
            const source = document.getElementById(sourceId)
            const template = target.querySelector(':scope > template')

            const update = () => {
                const visible = source.value == sourceValue
                if (visible && !target.hasAttribute('data-visible')) {
                    target.setAttribute('data-visible', '')
                    target.append(template.content.cloneNode(true))
                    fillFormValues(target)
                    bindRequiredAndVisibleTo(target)
                }
                if (!visible) {
                    target.removeAttribute('data-visible', '')
                    target.replaceChildren(template)
                }
            }
            update()
            source.addEventListener('input', () => update())
        }
    }

    function fillFormValues(scope) {
        if (formValues) {
            for (const [name, value] of Object.entries(formValues)) {
                const field = document.getElementsByName(name)[0] || document.getElementById(name)
                if (field != null) { field.value = value }
            }
        }
    }

    fillFormValues(document)
    bindRequiredAndVisibleTo(document)
    formValues = null
</script>
<script type="module" src="{{asset(path='/js/open-modal.js')}}"></script>
{% endblock scripts %}
