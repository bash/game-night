use anyhow::anyhow;
use lettre::message::{
    header::{Header, HeaderName, HeaderValue},
    MessageBuilder,
};
use std::error::Error as StdError;

pub(crate) trait MessageBuilderExt {
    /// Marks a message as auto-generated and thus disables automatic responses.
    fn auto_generated(self) -> Self;
}

impl MessageBuilderExt for MessageBuilder {
    fn auto_generated(self) -> Self {
        self.header(AutoSubmitted::AutoGenerated)
            .header(XAutoResponseSuppress::All)
    }
}

#[derive(Debug, Copy, Clone)]
pub(crate) enum AutoSubmitted {
    /// Indicates that a message was generated by an automatic process, and is not a direct response to another message.
    /// Automatic responses should not be issued to messages with this header. See <https://www.rfc-editor.org/rfc/rfc3834#section-2>.
    AutoGenerated,
}

impl Header for AutoSubmitted {
    fn name() -> HeaderName {
        HeaderName::new_from_ascii_str("Auto-Submitted")
    }

    fn parse(_: &str) -> Result<Self, Box<dyn StdError + Send + Sync>> {
        Err(anyhow!("Not supported").into())
    }

    fn display(&self) -> HeaderValue {
        HeaderValue::new(
            Self::name(),
            match self {
                Self::AutoGenerated => "auto-generated".to_owned(),
            },
        )
    }
}

#[derive(Debug, Copy, Clone)]
pub(crate) enum XAutoResponseSuppress {
    /// Suppresses auto responses from Exchange.
    /// See <https://learn.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcmail/e489ffaf-19ed-4285-96d9-c31c42cab17f> for details.
    All,
}

impl Header for XAutoResponseSuppress {
    fn name() -> lettre::message::header::HeaderName {
        HeaderName::new_from_ascii_str("X-Auto-Response-Suppress")
    }

    fn parse(_: &str) -> std::result::Result<Self, Box<dyn std::error::Error + Send + Sync>> {
        Err(anyhow!("Not supported").into())
    }

    fn display(&self) -> lettre::message::header::HeaderValue {
        HeaderValue::new(
            Self::name(),
            match self {
                Self::All => "All".to_owned(),
            },
        )
    }
}
